  services:
    postgres:
      image: postgres
      environment:
        POSTGRES_USER: postgres
        POSTGRES_DB: resensa
        POSTGRES_PASSWORD: 1423
        POSTGRES_HOST: postgres
      volumes:
        - postgres_volume:/app/files
      networks:
        - default_network
      healthcheck:
        test: [ "CMD", "pg_isready", "-U", "postgres" ]
        interval: 10s
        timeout: 5s
        retries: 10
    app:
      image: soramiyaz/fastapi-server:latest
      networks:
        - default_network
      volumes:
        - fastapi_server_volume:/app/files
      ports:
        - "8002:8002"
      depends_on:
        postgres:
          condition: service_healthy

    nginx:
      image: nginx:latest
      container_name: nginx
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf  # NGINX config (we'll create this)
        - ./certs:/etc/letsencrypt # Volume to store SSL certificates
      ports:
        - "80:80"
        - "443:443"
      depends_on:
        - fastapi
      networks:
        - backend
      restart: always

    certbot:
      image: certbot/certbot
      container_name: certbot
      volumes:
        - ./certs:/etc/letsencrypt
        - ./nginx.conf:/etc/nginx/nginx.conf
      entrypoint: >
        sh -c "certbot certonly --standalone --preferred-challenges http -d your-domain.com && nginx -s reload"
      depends_on:
        - nginx
      networks:
        - backend


  volumes:
    postgres_volume:
    fastapi_server_volume:

  networks:
    default_network:
      driver: bridge